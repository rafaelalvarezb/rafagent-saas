// ===================================================================================================
// VERSION 10 - AI SALES AGENT (SHELL SCRIPT - FINAL)
// This script connects to the central RafAgentLibrary and includes robust error handling for the UI, sends emails in HTML and with signature.
// ===================================================================================================

/**
 * Creates the custom menu. Runs when the sheet is opened.
 * This version is built to be more resilient.
 */
function onOpen() {
  // Primero, intenta crear el men칰. Esta es la parte m치s cr칤tica.
  try {
    SpreadsheetApp.getUi()
        .createMenu('游뱄 AI Agent')
        .addItem('Execute AI Agent Now 郊윒잺', 'manualAgentExecution')
        .addItem('Process Contacts from Zoominfo 游닐', 'processContactsFromGmail')
        .addToUi(); // .addToUi() confirma la creaci칩n del men칰.
  } catch (e) {
    // Si la creaci칩n del men칰 falla por alguna raz칩n, mostrar치 una alerta.
    SpreadsheetApp.getUi().alert('A critical error occurred while creating the menu: ' + e.message);
  }
  
  // De forma separada, intenta actualizar la versi칩n. Si esto falla, no impedir치 que el men칰 aparezca.
  try {
    updateVersionDisplay();
  } catch(e) {
    // Si la comunicaci칩n con la librer칤a falla, ahora ver치s el error exacto en un pop-up.
    SpreadsheetApp.getUi().alert('Could not update version from the library: ' + e.message);
  }
}

/**
 * Calls the library's onEditHandler function when a cell is edited.
 */
function onEditHandler(e) {
  RafAgentLibrary.onEditHandler(e);
}

/**
 * Calls the library's setup wizard.
 */
function setupWizard() {
  RafAgentLibrary.setupWizard();
}

/**
 * Calls the library's manual execution function.
 */
function manualAgentExecution() {
  RafAgentLibrary.manualAgentExecution();
}

/**
 * Calls the library's main trigger handler.
 */
function triggerHandler() {
  RafAgentLibrary.triggerHandler();
}

/**
 * Calls the library's contact processing function.
 */
function processContactsFromGmail() {
  RafAgentLibrary.processContactsFromGmail();
}

/**
 * Gets the current version from the library and writes it to the Configuration sheet.
 */
function updateVersionDisplay() {
  try {
    const version = RafAgentLibrary.getVersion();
    const configSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Configuration");
    if (configSheet) {
        configSheet.getRange("C1").setValue(`Version: ${version}`); // <-- Celda actualizada a C1
    }
  } catch(e) {
    Logger.log("Could not update version display. This can happen if the library is being updated.");
  }
}

/**
 * Llama a la funci칩n de diagn칩stico de la librer칤a.
 */
function runSignatureTest() {
  RafAgentLibrary.testSignature();
}